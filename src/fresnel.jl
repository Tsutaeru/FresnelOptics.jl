# f: linear frequency with standard unit (THz)
# c: speed of light, 2.99792458e-4 (m * THz)

export transmit, transmit!, reflect, reflect!, propagate, propagate!, œµr2nŒ∫!

transmit(n::Real, Œ∫::Real; forward::Bool=true) = forward ? transmit(1.00027, 0.0, n, Œ∫) : transmit(n, Œ∫, 1.00027, 0.0)

function transmit(ni::Real, Œ∫i::Real, nj::Real, Œ∫j::Real)
    nipnj = ni + nj
    Œ∫ipŒ∫j = Œ∫i + Œ∫j

    m = 2.0 * apy2(ni, Œ∫i) / apy2(nipnj, Œ∫ipŒ∫j)
    Œ∏ = atan(Œ∫i * nipnj - ni * Œ∫ipŒ∫j, ni * nipnj + Œ∫i * Œ∫ipŒ∫j)
    return m, Œ∏
end

reflect(n::Real, Œ∫::Real; forward::Bool=true) = forward ? reflect(1.00027, 0.0, n, Œ∫) : reflect(n, Œ∫, 1.00027, 0.0)

function reflect(ni::Real, Œ∫i::Real, nj::Real, Œ∫j::Real)
    nipnj = ni + nj
    Œ∫ipŒ∫j = Œ∫i + Œ∫j
    nimnj = ni - nj
    Œ∫imŒ∫j = Œ∫i - Œ∫j

    x = nimnj * nipnj + Œ∫imŒ∫j * Œ∫ipŒ∫j
    y = nipnj * Œ∫imŒ∫j - nimnj * Œ∫ipŒ∫j

    m = flipsign(apy2(nimnj, Œ∫imŒ∫j) / apy2(nipnj, Œ∫ipŒ∫j), x)
    iszero(y) && return m, 0.0
    return m, atan(abs(y), abs(x))
end

propagate(d::Real, f::Real; forward::Bool=true) = forward ? (1.0, 1.00027 * d * f * ùö∑ / 2.99792458e-4) : (1.0, -1.00027 * d * f * ùö∑ / 2.99792458e-4)

function propagate(n::Real, Œ∫::Real, f::Real, d::Real)
    dk = d * f * ùö∑ / 2.99792458e-4
    return exp(-Œ∫ * dk), n * dk
end

for fname in (:transmit, :reflect)
    fname! = Symbol(fname, '!')
    @eval begin
        function $(fname!)(rs::VecIO, Œ∏s::VecIO, n::VecI, Œ∫::VecI; forward::Bool=true)
            @inbounds for i in eachindex(rs)
                rs[i], Œ∏s[i] = $(fname)(n[i], Œ∫[i]; forward)
            end
        end
        function $(fname!)(rs::VecIO, Œ∏s::VecIO, n1::VecI, Œ∫1::VecI, n2::VecI, Œ∫2::VecI)
            @inbounds for i in eachindex(rs)
                rs[i], Œ∏s[i] = $(fname)(n1[i], Œ∫1[i], n2[i], Œ∫2[i])
            end
        end
    end
end

function propagate!(rs::VecIO, Œ∏s::VecIO, fs::VecI, d::Real; forward::Bool=true)
    œï = forward ? 1.00027 * d * ùö∑ : -1.00027 * d * ùö∑
    @simd for i in eachindex(Œ∏s)
        @inbounds rs[i], Œ∏s[i] = 1.0, œï * fs[i] / 2.99792458e-4
    end
end

function propagate!(rs::VecIO, Œ∏s::VecIO, n::VecI, Œ∫::VecI, fs::VecI, d::Real)
    @inbounds for i in eachindex(rs)
        tmpdk = d * fs[i] * ùö∑ / 2.99792458e-4
        rs[i] = exp(-Œ∫[i] * tmpdk)
        Œ∏s[i] = n[i] * tmpdk
    end
end

function œµr2nŒ∫!(œµ1::VecIO, œµ2::VecIO)
    @inbounds for i in eachindex(œµ1)
        e1 = œµ1[i]
        e2 = œµ2[i]
        # modulus
        em = apy2(e1, e2)
        œµ1[i] = sqrt(0.5 * (em + e1))
        œµ2[i] = sqrt(0.5 * (em - e1))
    end
end
